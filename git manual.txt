git init #최초 저장소 생성(respositery), 최초 1회만 실행

git status #저장소 상태 확인

git config --global core.quotepath false #git 한글 인식

git config --unset --global user.email.com #정보삭제

git config --global user.name ""
git config --global user.email.com "" #정보설정

git checkout filename #"filename" 를 다시꺼냄

git log #작업 히스토리 관리
git log --one line #작업 히스토리 관리(간략하게)

git commit -m "텍스트" #텍스트 저장


git branch 브랜치 이름 #'브랜치 이름'를 생성
git check 브랜치 이름 #'브랜치 이름'으로 이동
git merge 브랜치 이름 #현재 브랜치를'브랜치 이름'과 병합 (로그 등등이 병합됨)
git branch -d #브랜치 삭제 (d를 대문자로 이용시 강제삭제)

git push origin main #깃허브에 정보 보내기
git pull origin main #깃허브에서 정보 받기

git remote add origin 주소 #깃허브에 연결


1. cd \폴더명 #폴더명 으로 이동

2. git clone 주소 #깃허브에서 정보 복사해옴(1회만 하면 되는 작업)

3. notepad 로 read me 수정

4. git commit -m "텍스트"# 커밋하기

5. git push origin main #깃허브에 저장

6. git pull origin main # 리젝트 오류 발생시 정보 가져오기

7. 깃허브 정보가져올때 오류발생시 
	1.git pull origin main #정보 가져오기
	2.git add #변경내용 추가
	3.git commit -m "텍스트" # 커밋
	4.git push origin main #정보 보내기
